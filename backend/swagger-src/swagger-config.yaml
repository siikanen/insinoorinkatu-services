openapi: 3.0.3
info:
  version: 1.0.0
  title: Insin00ri API
  description: Insinöörinkadun taloAPI
servers:
  - url: 'http://localhost:3000/api/v1'
  - url: 'http://insinoori.lan/api/v1'
tags:
  - name: Users
    description: 'Provides methods of creating, updating and authenticating users.'
  - name: Expenses
    description: Gimme all your monin'
paths:
  /users/login:
    post:
      summary: Returns JWT token
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/UserTemplate'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: JWT
                    example: >-
                      eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: 'Bad request, please see error for details'
          content:
            application/json:
              schema:
                $ref: '#definitions/Error'
  /users:
    get:
      summary: Return all user data
      security:
        - bearerauth: []
      tags:
        - Users
      responses:
        '200':
          description: Array of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/definitions/AllUsers'
    post:
      summary: Create new user
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/UserTemplate'
      responses:
        '201':
          description: New user has been created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#components/schemas/User'
        '400':
          description: 'Bad request, please see error for details'
          content:
            application/json:
              schema:
                $ref: '#definitions/Error'
  '/user/{id}':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuidv4
    get:
      summary: View single user
      security:
        - bearerAuth: []
      tags:
        - Users
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#components/schemas/User'
        '404':
          description: User with given id was not found
          content:
            application/json:
              schema:
                $ref: '#definitions/Error'
    put:
      summary: Update user details
      tags:
        - Users
      security:
        - bearerauth: []
      requestBody:
        description: Fields to modify
        content:
          application/json:
            schema:
              $ref: '#/definitions/UserModifyTemplate'
      responses:
        '200':
          description: Successfully modified
        '400':
          description: 'Something was wrong with the request, see error message'
          content:
            application/json:
              schema:
                $ref: '#definitions/Error'
        '403':
          description: Trying to modify user you have no authorization to modify
          content:
            application/json:
              schema:
                $ref: '#definitions/Error'
        '404':
          description: User with given id was not found
          content:
            application/json:
              schema:
                $ref: '#definitions/Error'
    delete:
      summary: Delete user
      security:
        - bearerauth: []
      tags:
        - Users
      responses:
        '204':
          description: Successfully deleted
        '400':
          description: 'Something was wrong with the request, see error message'
          content:
            application/json:
              schema:
                $ref: '#definitions/Error'
        '403':
          description: Trying to delete user you have no authorization to modify
          content:
            application/json:
              schema:
                $ref: '#definitions/Error'
        '404':
          description: User with given id was not found
          content:
            application/json:
              schema:
                $ref: '#definitions/Error'
  /expenses:
    get:
      summary: List all expenses
      operationId: getExpenses
      security:
        - bearerauth: []
      tags:
        - Expenses
      parameters:
        - name: month
          in: query
          description: Filter expenses to given month
          required: false
          schema:
            type: integer
            format: int
            example: 7
        - name: year
          in: query
          description: Filter expenses to given year
          required: false
          schema:
            type: integer
            format: int
            example: 2020
        - name: tags
          in: query
          description: Filter expenses by tags. Multiple tags divided by comma
          required: false
          schema:
            type: list
            format: string
            example: 'food,mökkireissu'
        - name: skip
          in: query
          description: Number of items to skip in DB
          schema:
            type: integer
            format: int
            example: 10
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            format: int
            example: 25
      responses:
        '200':
          description: Array of expenses
          content:
            application/json:
              schema:
                $ref: '#definitions/Expenses'
    post:
      summary: Create an expense
      operationId: createExpense
      security:
        - bearerAuth: []
      tags:
        - Expenses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/definitions/ExpenseTemplate'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '400':
          description: 'Bad request, please see error for details'
          content:
            application/json:
              schema:
                $ref: '#definitions/Error'
  '/expenses/{id}':
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuidv4
    get:
      summary: View single expense
      security:
        - bearerauth: []
      tags:
        - Expenses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#components/schemas/Expense'
    put:
      summary: Modify an expense
      operationId: modifyExpense
      security:
        - bearerauth: []
      tags:
        - Expenses
      requestBody:
        description: Full expense object to replace with
        content:
          application/json:
            schema:
              $ref: '#/definitions/ExpenseModifyTemplate'
    delete:
      summary: Delete an expense
      operationId: deleteExpense
      security:
        - bearerauth: []
      tags:
        - Expenses
      responses:
        '204':
          description: Deleted successfully
        '404':
          description: Expense with given id was not found
          content:
            application/json:
              schema:
                $ref: '#definitions/Error'
definitions:
  AllUsers:
    type: object
    properties:
      data:
        items:
          type: array
          $ref: '#/components/schemas/User'
    example:
      - id: 0121da9b-bb13-4e6a-bc1a-635c9b874677
        username: hansolo
      - id: b46402a6-6e42-4c31-bd5a-2c30887562aa
        username: chewbacca
  UserTemplate:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
        example: hansolo
      password:
        type: string
        example: D0nTu5eTH!spas5w0rD!
  UserModifyTemplate:
    type: object
    properties:
      username:
        type: string
        example: princessleia
      password:
        type: string
        example: i<3han
  Error:
    type: object
    properties:
      error:
        type: object
        properties:
          message:
            type: string
            example: This and that went nuts
  Expenses:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: '#/components/schemas/Expense'
  ExpenseTemplate:
    type: object
    required:
      - title
      - amount
      - description
      - payee
      - date
    properties:
      title:
        type: string
        description: As short as possible
        example: K-Supermarket Duo
      description:
        type: string
        description: More detailed decription of the payment
        example: Bananas and burgers for the weekend
      amount:
        type: number
        format: int
        description: Amount of payment in EUR cents
        example: 1159
      date:
        type: string
        format: iso8601
        decription: Date that the payment was made
        example: 2020-12-13T14:40:18.000Z
      payee:
        description: Who paid this
        $ref: '#/components/schemas/User'
      tags:
        type: array
        items:
          type: string
        description: List of very decribing tags to find this expense afterwards
        example:
          - food
          - mökkireissu
  ExpenseModifyTemplate:
    type: object
    properties:
      title:
        type: string
        description: As short as possible
        example: K-Supermarket Duo
      description:
        type: string
        description: More detailed decription of the payment
        example: Bananas and burgers for the weekend
      amount:
        type: number
        format: int
        description: Amount of payment in EUR cents
        example: 1159
      date:
        type: string
        format: iso8601
        decription: Date that the payment was made
        example: 2020-12-13T14:40:18.000Z
      payee:
        description: Who paid this
        $ref: '#/components/schemas/User'
      tags:
        description: List of very decribing tags to find this expense afterwards
        type: array
        items:
          type: string
        example:
          - food
          - mökkireissu
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: uuid
          format: uuidv4
          example: 0121da9b-bb13-4e6a-bc1a-635c9b874677
        username:
          type: string
          example: hansolo
    Expense:
      allOf:
        - type: object
          properties:
            id:
              type: uuid
              format: uuidv4
              example: 0121da9b-bb13-4e6a-bc1a-635c9b874677
            created:
              type: string
              format: iso8601
              example: '2020-12-17T11:40:18+00:00'
            updated:
              type: string
              format: iso8601
              example: 2020-12-17T11:40:18.000Z
        - $ref: '#/definitions/ExpenseTemplate'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: header
  responses:
    UnauthorizedError:
      description: Access token is missing
    ForbiddenError:
      description: Access token is invalid
    NotFoundError:
      description: Requested resource was not found

